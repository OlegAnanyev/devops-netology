1. cd это shell builtin команда. Это логично т.к. её задача -- поменять дескриптор cwd (current working directory) самого shell-a

2. grep <some_string> <some_file> -c    -- ключ -c для команды grep выведет количество строк с вхождениями <some_string>

3. systemd, если смотреть через pstree -p или через top. Но cat /proc/1/cmdline показывает, что вызван ядром этот процесс был как /sbin/init

4. Например так:
vagrant@vagrant:~$ ls /no-directory 2> /proc/1308/fd/0
здесь 1308 -- PID конечного терминала

5. vagrant@vagrant:~$ cat file.txt | wc -l >wc.txt   -- передаст содержимое файла file.txt в wc, а вывод wc запишет в файл wc.txt

6. да, аналогично примеру из пункта 4, вывод ошибки команды ls отобразился в эмуляторе TTY:
$ ls /no-directory 2> /proc/18186/fd/0

7. bash 5>&1 запустит bash, с указанием, что нужно открыть поток с файловым дескриптором 5, который будет направлен в дескриптор 1 (stdout) этого же процесса
echo netology > /proc/$$/fd/5		после предыдущей команды выведет "netology" в поток 5, откуда перенаправится в 1 и, в свою очередь, выведет "netology" в текущем терминале

8. вот так с помощью пайпа в grep попадёт и отфильтруется вывод потока stderr команды ls, а stdout будет выводиться в консоль: 

vagrant@vagrant:~$ ls /no-directory 8>&1 9>&2 2>&8 1>&9 | grep "cannot access" -o
cannot access

9. Команда выведет текущие переменные окружения с их значениями. Аналогичный вывод даст вызов команды printenv

10. в /proc/<PID>/cmdline содержится командная строка процесса <PID>, т.к. какой конкретно командой он был вызван
/proc/<PID>/exe -- символическая ссылка на исполняемый файл процесса <PID>

11. vagrant@vagrant:~$ grep "sse" /proc/cpuinfo
sse4_2
