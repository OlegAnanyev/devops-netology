1. Чтобы наполнить 1 Гбит/с канал при 300 мс RTT без учёта потерь пакетов нужно окно размером: 1 000 000 000 * 0.3 = 300 000 000 бит = 37 500 000 байт = 37,5 Мбайт
Передать 500 Гб по 1 Гбит каналу можно за 500 / ( (1 000 000 000 / 8)  / 1 000 000 000) = 4000 секунд = 66 минут.

2. Чем больше размер окна, тем больше требования к ОЗУ для буферизации и тем критичнее потеря каждого пакета, т.к. при этом требуется повторная передача всего окна.
Согласно уравнению Mathis, при 1% потерь, пропускная способность 100 Мбит/с канала упадёт примерно в 6,5 раз до 14,6 Мбит/с. 

3. При работе с фреймами с максимальным payload (1500 байт), он будет составлять 97,5% от всех передаваемых данных (1500/((7+1+6+6+2+1500+4+12)/100)), т.е. реально на 100 Мбит/с канале можно получить около 12,19 Мбайт/с. Для фреймов с минимальным payload: (42/((7+1+6+6+2+42+4+12)/100)) 52,5%, т.е. 6,56 Мбайт/с.

4. при выполнении команды curl -I http://netology.ru:
- происходит определние IP-адреса домена netology.ru: вызывается библиотечная (sic!) функция getaddrinfo, проверяется нет ли данного доменного имени локальном файле hosts, в противном случае отправляется рекурсивный запрос к DNS-серверу в локальной сети или провайдерскому указанному в /etc/resolv.conf, тот в свою очередь отправляет итеративный запрос серверу отвечающему за корневую зону, чтобы выяснить сервер отвечающий за зону ru, чтобы у данного сервера выяснить сервер, отвечающий за домен netology.ru, чтобы получить у него IP-адрес, в который резолвится netology.ru
- после получения IP-адреса открывается сокет; собирается TCP-сегмент с заколовками исходного порта и порта назначения, далее добавляется IP-заголовок сервера и клиента, далее на канальном уровне добавляются заголовки с MAC-адлресом клиента и шлюза, готовый фрейм передаётся на маршрутизатор, далее от одного маршрутизатора к другому пока не доберётся до сервера
- устаналивается TCP-соединение -- сервер получает пакет с SYN-флагом, если он готов к открытию соединения, то отвечает SYN, ACK, клиент отвечает ACK
- начинается передача данных по протоколу HTTP: запрос GET / HTTP/1.1 Host: netology.ru, заголовки, пустая строка... Сервер отвечает кодом ответа HTTP/1.1 301 Moved Permanently..., что в данном случае означает, что сайт недоступен по HTTP и вместо HTTP нужно использовать HTTPS
В целом это можно детализировать почти бесконечно, но ключевые моменты, относящиеся к лекциям я, кажется, охватил.

5. При резолве домена www.google.co.uk будет сделано 3 итеративных запроса:
- к l.root-servers.net о том, какой сервер отвечает за зону uk
- к nsc.nic.uk о том, какой сервер отвечает за google.co.uk
- к ns4.google.com о том, какой IP адрес у домена www.google.co.uk

6. В подсети /25 доступно 126 IP-адресов (включая адрес подсети и broadcast). Для подсети с маской 255.248.0.0: 524286 IP-адресов.

7. В подсети /23 больше адресов (510), чем в /24 (254).

8. Разделить диапазон 10.0.0.0/8 на 128 подсетей по 131070 адресов в каждой получится. Маска будет 255.254.0.0 (/15)

9. Соединения в столбце InActConn будут висеть по той причине, что при запросе страницы по протоколу HTTP соединение TCP разрывается сразу после того, как страница и все её элементы были получены. И до тех пор пока соединение висит в статусе TIMEWAIT, LVS держит его в списке неактивных. Однако, повторюсь, в случае с HTTP соединения почти всегда просто закроются по таймауту.

10. 

11.
