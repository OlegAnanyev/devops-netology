Домашнее задание к занятию "3.3. Операционные системы"

1. Ключевым системным вызовом команды cd можно, пожалуй, считать chdir() :
vagrant@vagrant:~$ strace -e trace=read /bin/bash -c 'cd /tmp' 2>&1 | grep tmp
chdir("/tmp")

2. Основная база с сигнатурами типов файлов для команды file лежит в /usr/share/misc/magic.mgc
vagrant@vagrant:~$ strace file ~/list.txt 2>&1 | grep open
openat(AT_FDCWD, "/usr/share/misc/magic.mgc", O_RDONLY) = 3

и ещё есть файл /etc/magic, в котором тоже могут быть сигнатуры
openat(AT_FDCWD, "/etc/magic", O_RDONLY) = 3

3. Чтобы обнулить содержимое открытого удалённого файла, можно сделать так:
vagrant@vagrant:/tmp$ lsof -p 14875 | grep do_not_delete_me
python3 14875 vagrant    3r   REG  253,0       20 1572876 /tmp/do_not_delete_me (deleted)
vagrant@vagrant:/tmp$ cat /proc/14875/fd/3
Very valuable data!
vagrant@vagrant:/tmp$ echo "" > /proc/14875/fd/3
vagrant@vagrant:/tmp$ cat /proc/14875/fd/3
                                                      
vagrant@vagrant:/tmp$

4. Процессы-зомби не занимают таких ресурсов ОС как CPU, RAM, IO, но занимают строки в таблице процессов, которая тоже не бесконечна.

5. Через opensnoop первыми видим вызовы open к следующим файлам:
vagrant@vagrant:~$ sudo opensnoop-bpfcc

PID    COMM               FD ERR PATH                                                                                                                        
825    vminfo              5   0 /var/run/utmp                                                                                                               
610    dbus-daemon        -1   2 /usr/local/share/dbus-1/system-services                                                                                     
610    dbus-daemon        18   0 /usr/share/dbus-1/system-services                                                                                           
610    dbus-daemon        -1   2 /lib/dbus-1/system-services                                                                                                 
                                                                                                      

6. uname -a использует одноимённый системный вызов -- uname()
"Part of the utsname information is also accessible via /proc/sys/kernel/{ostype, hostname, osrelease, version, domainname}."

7. В случае использования &&, последующая команда выполняется только в случае, если предыдущая завершилась успешно (с кодом 0). В случае с ; это условие не проверяется. Однако если использовать set -e, то разницы не будет.
-e  Exit immediately if a command exits with a non-zero status.

8. Режим set -euxo pipefail состоит из следующих опций:
-e  Exit immediately if a command exits with a non-zero status. -- сразу прерывать сценарий, если в результате хотя бы одной команды не получили успешного завершения
-u  Treat unset variables as an error when substituting. -- если какая-то переменная не задана, считать это ошибкой
-x  Print commands and their arguments as they are executed. -- выводить команды с аргументами
-o option-name
pipefail     the return value of a pipeline is the status of the last command to exit with a non-zero status, or zero if no command exited with a non-zero status -- счатать результатом исполнения сценария 0, если все команды завершились с кодом 0, в противном случае кодом завершения сценария считать код завершения последней команды, которая завершилась не с нулевым кодом (вместе с опцией -e она же будет и первой).
Этот режим хорошо использовать в сценариях, потому что он минимизирует возможные проблемы после запуска сценария и даёт информацию для отладки.

9. Если считать то, что выдаёт ps -o stat, то в моей системе ровно половина процессов в статусе S -- interruptible sleep и половина в статусе R -- running.
Если смотреть все процессы в системе через ps -e -o stat, то больше всего S и довольно много I -- Idle kernel thread.


10. Да, факт виртуализации и используемая система определяется через dmesg.
vagrant@vagrant:~$ dmesg | grep virtu
[    0.086444] Booting paravirtualized kernel on KVM
[    2.285718] systemd[1]: Detected virtualization oracle.

на другой системе:
[hawk:~/PycharmProjects … -netology/homeworks] master ± dmesg | grep virtu
[    0.057054] Booting paravirtualized kernel on VMware hypervisor
[    2.401279] systemd[1]: Detected virtualization vmware.

11. fs.nr_open определяет, сколько максимально может быть открыто файловых дескрипторов в системе. По-умолчанию:
vagrant@vagrant:~$ sysctl -a | grep fs.nr_open
sysctl: fs.nr_open = 1048576                 

В ulimit видим более жёсткое ограничение, поэтому работать будет оно.
vagrant@vagrant:~$ ulimit -a | grep open
open files                      (-n) 1024

12. В отдельном screen-е я запустил:
vagrant@vagrant:~$ sudo unshare -f --pid --mount-proc /bin/bash
Вернулся в основной screen.
Проверил, что namespace по pid для sleep создался:
vagrant@vagrant:~$ sudo lsns
Проверил, через htop под каким pid целевой процесс - 1201.
Подключился к неймспейсу данного процесса:
vagrant@vagrant:~$ sudo nsenter --target 1201 --pid --mount                                                                                                                                                                                     
root@vagrant:/# ps aux                                                                                                                                                                                                                          
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND                                                                                                                                                                      
root           1  0.0  0.0   8076   528 pts/1    S+   16:35   0:00 sleep 1h                                                                                                                                                                     
root           2  0.0  0.3   9836  3916 pts/0    S    16:39   0:00 -bash                                                                                                                                                                        
root          11  0.0  0.3  11476  3308 pts/0    R+   16:39   0:00 ps aux 

13. :(){ :|:& };: это последовательность команд, которая является "fork-бомбой" -- функция вызывает себя дважды, каждая из вызванных функций вызывает себя дважды и так далее в геометрической прогрессии пока не кончатся ресурсы. Стабилизирует систему ограничение на максимальное число процессов в слайсе текущего пользователя с id 1000.
[ 1213.001493] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-3.scope

vagrant@vagrant:~$ systemctl cat user-1000.slice | grep Task                                                                                                                                            
TasksMax=33%                                                

14. Так происходит потому что ssh localhost 'tty' вызывает одну команду и открывает командного интерпретатора, а следовательно tty просто не создаётся. Если сделать ssh localhost и залогиниться, то tty выдаст новое ассоциированное с терминалом /dev/pts/X.

15. Перенести процесс из одного терминала в другой получилось, однако для этого пришлось изменить значение /proc/sys/kernel/yama/ptrace_scope с 1 на 0
